#!/usr/bin/env node

// require("../config/initializers");

const mongoose = require("mongoose");
const debug = require("debug")("biteship-shield-node:server");
const http = require("http");
// const config = require("../config");
// const Writer = require("../src/infra/nsq/writer");
const logger = require("../lib/logger");
const expressServer = require("../src/server");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(8081);
expressServer.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(expressServer);

/**
 * Graceful shutdown
 */
process.on("SIGINT", () => {
  logger.info("process:", "SIGINT signal received!");
  logger.info("server:", "Gracefully shutdown...");

  server.close(() => {
    logger.info("server:", "successfully terminated!");
    process.exit(0);
  });
});

process.on("unhandledRejection", async (reason, promise) => {
  try {
    logger.error("unhandledRejection:", reason.message);
    logger.error("unhandledRejection:", reason.stack);

    if (reason.response?.config) {
      const requestConfig = reason.response?.config;
      logger.error("unhandledRejection:", requestConfig.method.toUpperCase(), requestConfig.url);
    }
  } catch (error) {
    logger.error("unhandledRejection:", error.message);
    logger.error("unhandledRejection:", error.stack);
  } finally {
    process.exit(1);
  }
});

mongoose
  .connect(process.env.DATABASE_URL)
  .then(() => {
    logger.info("mongodb:", "ready!");
    server.listen(port, () => {
      logger.info("server:", `Listening on port ${port}`);
    });
  })
  .catch((err) => {
    logger.error("mongodb:", "cannot connect to database with error:", err.message);
  });

/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
